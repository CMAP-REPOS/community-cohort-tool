############## PART 1: SETUP AND IMPORT
#install.packages("tidyverse", "readxl", "ggplot2", "sf", "tmap", "tmaptools", "devtools")
#devtools::install_github("CMAP-REPOS/cmapplot", build_vignettes = TRUE)
#devtools::install_github("CMAP-REPOS/cmapgeo", build_vignettes = TRUE)
library(tidyverse)
library(readxl)
library(ggplot2)
library(sf)
library(tmap)
library(tmaptools)
library(cmapplot)
library(cmapgeo)
apply_cmap_default_aes()
COHORT_YEAR <- 2024  # Update this each year!
IN_XLSX <- "input/community_cohort_inputs_edi_2024.xlsx"  # Spreadsheet containing latest data
# Load input factors, weights and cohort thresholds -----------------------
FACTORS_MUNI <- read_xlsx(IN_XLSX, sheet="FACTORS_MUNI")
FACTORS_CCA <- read_xlsx(IN_XLSX, sheet="FACTORS_CCA")
WEIGHTS <- read_xlsx(IN_XLSX, sheet="WEIGHTS")
COHORTS <- read_xlsx(IN_XLSX, sheet="COHORTS")
COHORTS$COHORT <- as.character(COHORTS$COHORT)
# Calculate factor-specific scoring thresholds ----------------------------
WEIGHTS$MED <- unlist(summarize_all(FACTORS_MUNI[, WEIGHTS$FACTOR_NAME], median)[1,])
WEIGHTS$SD <- unlist(summarize_all(FACTORS_MUNI[, WEIGHTS$FACTOR_NAME], sd)[1,])
WEIGHTS <- WEIGHTS %>%
mutate(
CUT0 = -Inf,
CUT1 = MED - SD * 1.2816,  # ~10th %ile (based on standard normal distribution)
CUT2 = MED - SD * 0.8416,  # ~20th %ile
CUT3 = MED - SD * 0.5244,  # ~30th %ile
CUT4 = MED - SD * 0.2533,  # ~40th %ile
CUT5 = MED,                # ~50th %ile
CUT6 = MED + SD * 0.2533,  # ~60th %ile
CUT7 = MED + SD * 0.5244,  # ~70th %ile
CUT8 = MED + SD * 0.8416,  # ~80th %ile
CUT9 = MED + SD * 1.2816,  # ~90th %ile
CUT10 = Inf
)
# Force equal intervals and midpoint of 0.5 for PCT_EDA_POP factor
WEIGHTS[WEIGHTS$FACTOR_NAME=="PCT_EDA_POP", paste0("CUT", 1:9)] <- as.list(seq(0.1, 0.9, 0.1))
############## PART 2: CALCULATE SCORES
# Calculate factor-specific scores ----------------------------------------
keep_cols_muni <- append(c("GEOID", "MUNI"), WEIGHTS$FACTOR_NAME)
keep_cols_cca <- append(c("CCA_ID", "CCA_NAME"), WEIGHTS$FACTOR_NAME)
FACTORS_MUNI <- FACTORS_MUNI[, keep_cols_muni]
FACTORS_CCA <- FACTORS_CCA[, keep_cols_cca]
score_cols <- c()
wt_score_cols <- c()
for (factor in unlist(WEIGHTS[WEIGHTS$WEIGHT!=0, "FACTOR_NAME"])) {
weight <- WEIGHTS[WEIGHTS$FACTOR_NAME==factor, "WEIGHT"][[1]]
score_col <- paste0("SCORE_", factor)
score_cols <- append(score_cols, score_col)
wt_score_col <- paste0("WT_SCORE_", factor)
wt_score_cols <- append(wt_score_cols, wt_score_col)
cuts <- WEIGHTS[WEIGHTS$FACTOR_NAME==factor,] %>%
select(starts_with("CUT"))
groups <- c(1:10)
FACTORS_MUNI[, score_col] <- cut(as.matrix(FACTORS_MUNI[, factor]), cuts, groups, labels=FALSE)
FACTORS_CCA[, score_col] <- cut(as.matrix(FACTORS_CCA[, factor]), cuts, groups, labels=FALSE)
if (weight < 0) {
# Reverse score order for factors with negative weights
FACTORS_MUNI[, score_col] <-  max(groups) + 1 - FACTORS_MUNI[, score_col]
FACTORS_CCA[, score_col] <-  max(groups) + 1 - FACTORS_CCA[, score_col]
}
FACTORS_MUNI[, wt_score_col] <- FACTORS_MUNI[, score_col] * abs(weight)
FACTORS_CCA[, wt_score_col] <- FACTORS_CCA[, score_col] * abs(weight)
}
# Calculate 1-yr score & 1-yr cohort ---------------------------------------
FACTORS_MUNI$SCORE_OVERALL <- rowSums(FACTORS_MUNI[, wt_score_cols])
FACTORS_CCA$SCORE_OVERALL <- rowSums(FACTORS_CCA[, wt_score_cols])
# Rescale from 0-100
min_wt_score <- sum(abs(WEIGHTS$WEIGHT)) * 1
max_wt_score <- sum(abs(WEIGHTS$WEIGHT)) * 10
FACTORS_MUNI <- FACTORS_MUNI %>%
mutate(SCORE_OVERALL_SCALED = (SCORE_OVERALL - min_wt_score) / (max_wt_score - min_wt_score) * 100)
FACTORS_MUNI$COHORT <- cut(as.vector(FACTORS_MUNI$SCORE_OVERALL_SCALED), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
FACTORS_MUNI <- FACTORS_MUNI %>%
mutate(COHORT = fct_relevel(COHORT, sort))
FACTORS_CCA <- FACTORS_CCA %>%
mutate(SCORE_OVERALL_SCALED = (SCORE_OVERALL - min_wt_score) / (max_wt_score - min_wt_score) * 100)
FACTORS_CCA$COHORT <- cut(as.vector(FACTORS_CCA$SCORE_OVERALL_SCALED), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
FACTORS_CCA <- FACTORS_CCA %>%
mutate(COHORT = fct_relevel(COHORT, sort))
writexl::write_xlsx(FACTORS_MUNI, paste0("output/muni_edi_1yr_2024.xlsx"))
writexl::write_xlsx(FACTORS_CCA, paste0("output/cca_edi_1yr_2024.xlsx"))
# Calculate 3-year average scores and reassign cohorts --------------------
# Munis
MUNI_CURRENTYR <- FACTORS_MUNI %>%
rename(WEIGHTED_SCORE = SCORE_OVERALL_SCALED) %>%
select(GEOID, MUNI, COHORT, WEIGHTED_SCORE, starts_with("SCORE_")) %>%
select(-SCORE_OVERALL)
MUNI_SCORES_YEAR1 <- paste0("output\\muni_edi_1yr_2022.csv") %>%
read_csv() %>%
select(GEOID, SCORE_YEAR1 = SCORE_OVERALL_SCALED)
MUNI_SCORES_YEAR2 <- paste0("output\\muni_edi_1yr_2023.csv") %>%
read_csv() %>%
select(GEOID, SCORE_YEAR2 = SCORE_OVERALL_SCALED)
MUNI_SCORES_3YR_AVG <- MUNI_CURRENTYR %>%
select(GEOID, MUNI, SCORE_YEAR3 = WEIGHTED_SCORE) %>%
mutate(GEOID = as.numeric(GEOID)) |>
left_join(MUNI_SCORES_YEAR2) %>%
left_join(MUNI_SCORES_YEAR1) %>%
mutate(WEIGHTED_SCORE_3YR = (SCORE_YEAR1 + SCORE_YEAR2 + SCORE_YEAR3) / 3) %>%
select(-starts_with("SCORE_YEAR"))
MUNI_SCORES_3YR_AVG$COHORT_3YR <- cut(as.vector(MUNI_SCORES_3YR_AVG$WEIGHTED_SCORE_3YR), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
MUNI_SCORES_3YR_AVG <- MUNI_SCORES_3YR_AVG %>%
mutate(COHORT_3YR = fct_relevel(COHORT_3YR, sort))
# CCAs
CCA_CURRENTYR <- FACTORS_CCA %>%
rename(WEIGHTED_SCORE = SCORE_OVERALL_SCALED) %>%
select(CCA_ID, CCA_NAME, COHORT, WEIGHTED_SCORE, starts_with("SCORE_")) %>%
select(-SCORE_OVERALL)
CCA_SCORES_YEAR1 <- paste0("output\\cca_edi_1yr_2022.csv") %>%
read_csv() %>%
select(CCA_ID, SCORE_YEAR1 = SCORE_OVERALL_SCALED)
CCA_SCORES_YEAR2 <- paste0("output\\cca_edi_1yr_2023.csv") %>%
read_csv() %>%
select(CCA_ID, SCORE_YEAR2 = SCORE_OVERALL_SCALED)
CCA_SCORES_3YR_AVG <- CCA_CURRENTYR %>%
select(CCA_ID, CCA_NAME, SCORE_YEAR3 = WEIGHTED_SCORE) %>%
mutate(CCA_ID = as.numeric(CCA_ID)) |>
left_join(CCA_SCORES_YEAR2) %>%
left_join(CCA_SCORES_YEAR1) %>%
mutate(WEIGHTED_SCORE_3YR = (SCORE_YEAR1 + SCORE_YEAR2 + SCORE_YEAR3) / 3) %>%
select(-starts_with("SCORE_YEAR"))
CCA_SCORES_3YR_AVG$COHORT_3YR <- cut(as.vector(CCA_SCORES_3YR_AVG$WEIGHTED_SCORE_3YR), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
CCA_SCORES_3YR_AVG <- CCA_SCORES_3YR_AVG %>%
mutate(COHORT_3YR = fct_relevel(COHORT_3YR, sort))
openxlsx::write.xlsx(
list(
COHORT_EDI_MUNI = MUNI_SCORES_3YR_AVG,
COHORT_EDI_CCA = CCA_SCORES_3YR_AVG),
file = "output//edi_results_24.xlsx",
rowNames = FALSE)
# comparison --------------------------------------------------------------
old_scores_munis <- read_csv("input/cohort_assignments_muni_3yr_2022_2024.csv") |> select(GEOID, old_cohort = COHORT_3YR)
old_scores_ccas <- read_csv("input/cohort_assignments_cca_3yr_2022_2024.csv") |> select(CCA_ID, old_cohort = COHORT_3YR)
join_munis <- MUNI_SCORES_3YR_AVG |>
left_join(old_scores_munis) |>
mutate(score_change = as.numeric(COHORT_3YR) - as.numeric(old_cohort),
abs_change = abs(score_change)         ,
direction = case_when(
score_change < 0 ~ "Lower need after change",
score_change > 0 ~ "Higher need after change",
score_change == 0 ~ "Same need after change",
T ~ NA
))
join_cca <- CCA_SCORES_3YR_AVG |>
left_join(old_scores_ccas) |>
mutate(score_change = as.numeric(COHORT_3YR) - as.numeric(old_cohort),
abs_change = abs(score_change)         ,
direction = case_when(
score_change < 0 ~ "Lower need after change",
score_change > 0 ~ "Higher need after change",
score_change == 0 ~ "Same need after change",
T ~ NA
)) |>
rename(GEOID = CCA_ID, MUNI = CCA_NAME)
table(join_munis$score_change)
prop.table(table(join_munis$score_change))
table(join_cca$score_change)
prop.table(table(join_cca$score_change))
change <- rbind(join_cca, join_munis) |> filter(direction != "Same need after change")
write_csv(change, "edi_changes.csv")
install.packages(c("Hmisc", "httr2", "later", "promises"))
############## PART 1: SETUP AND IMPORT
#install.packages("tidyverse", "readxl", "ggplot2", "sf", "tmap", "tmaptools", "devtools")
#devtools::install_github("CMAP-REPOS/cmapplot", build_vignettes = TRUE)
#devtools::install_github("CMAP-REPOS/cmapgeo", build_vignettes = TRUE)
library(tidyverse)
library(readxl)
library(ggplot2)
library(sf)
library(tmap)
library(tmaptools)
library(cmapplot)
library(cmapgeo)
apply_cmap_default_aes()
COHORT_YEAR <- 2024  # Update this each year!
IN_XLSX <- "input/community_cohort_inputs_edi_2024.xlsx"  # Spreadsheet containing latest data
# Load input factors, weights and cohort thresholds -----------------------
FACTORS_MUNI <- read_xlsx(IN_XLSX, sheet="FACTORS_MUNI")
FACTORS_CCA <- read_xlsx(IN_XLSX, sheet="FACTORS_CCA")
WEIGHTS <- read_xlsx(IN_XLSX, sheet="WEIGHTS")
COHORTS <- read_xlsx(IN_XLSX, sheet="COHORTS")
COHORTS$COHORT <- as.character(COHORTS$COHORT)
# Calculate factor-specific scoring thresholds ----------------------------
WEIGHTS$MED <- unlist(summarize_all(FACTORS_MUNI[, WEIGHTS$FACTOR_NAME], median)[1,])
WEIGHTS$SD <- unlist(summarize_all(FACTORS_MUNI[, WEIGHTS$FACTOR_NAME], sd)[1,])
WEIGHTS <- WEIGHTS %>%
mutate(
CUT0 = -Inf,
CUT1 = MED - SD * 1.2816,  # ~10th %ile (based on standard normal distribution)
CUT2 = MED - SD * 0.8416,  # ~20th %ile
CUT3 = MED - SD * 0.5244,  # ~30th %ile
CUT4 = MED - SD * 0.2533,  # ~40th %ile
CUT5 = MED,                # ~50th %ile
CUT6 = MED + SD * 0.2533,  # ~60th %ile
CUT7 = MED + SD * 0.5244,  # ~70th %ile
CUT8 = MED + SD * 0.8416,  # ~80th %ile
CUT9 = MED + SD * 1.2816,  # ~90th %ile
CUT10 = Inf
)
# Force equal intervals and midpoint of 0.5 for PCT_EDA_POP factor
WEIGHTS[WEIGHTS$FACTOR_NAME=="PCT_EDA_POP", paste0("CUT", 1:9)] <- as.list(seq(0.1, 0.9, 0.1))
############## PART 2: CALCULATE SCORES
# Calculate factor-specific scores ----------------------------------------
keep_cols_muni <- append(c("GEOID", "MUNI"), WEIGHTS$FACTOR_NAME)
keep_cols_cca <- append(c("CCA_ID", "CCA_NAME"), WEIGHTS$FACTOR_NAME)
FACTORS_MUNI <- FACTORS_MUNI[, keep_cols_muni]
FACTORS_CCA <- FACTORS_CCA[, keep_cols_cca]
score_cols <- c()
wt_score_cols <- c()
for (factor in unlist(WEIGHTS[WEIGHTS$WEIGHT!=0, "FACTOR_NAME"])) {
weight <- WEIGHTS[WEIGHTS$FACTOR_NAME==factor, "WEIGHT"][[1]]
score_col <- paste0("SCORE_", factor)
score_cols <- append(score_cols, score_col)
wt_score_col <- paste0("WT_SCORE_", factor)
wt_score_cols <- append(wt_score_cols, wt_score_col)
cuts <- WEIGHTS[WEIGHTS$FACTOR_NAME==factor,] %>%
select(starts_with("CUT"))
groups <- c(1:10)
FACTORS_MUNI[, score_col] <- cut(as.matrix(FACTORS_MUNI[, factor]), cuts, groups, labels=FALSE)
FACTORS_CCA[, score_col] <- cut(as.matrix(FACTORS_CCA[, factor]), cuts, groups, labels=FALSE)
if (weight < 0) {
# Reverse score order for factors with negative weights
FACTORS_MUNI[, score_col] <-  max(groups) + 1 - FACTORS_MUNI[, score_col]
FACTORS_CCA[, score_col] <-  max(groups) + 1 - FACTORS_CCA[, score_col]
}
FACTORS_MUNI[, wt_score_col] <- FACTORS_MUNI[, score_col] * abs(weight)
FACTORS_CCA[, wt_score_col] <- FACTORS_CCA[, score_col] * abs(weight)
}
# Calculate 1-yr score & 1-yr cohort ---------------------------------------
FACTORS_MUNI$SCORE_OVERALL <- rowSums(FACTORS_MUNI[, wt_score_cols])
FACTORS_CCA$SCORE_OVERALL <- rowSums(FACTORS_CCA[, wt_score_cols])
# Rescale from 0-100
min_wt_score <- sum(abs(WEIGHTS$WEIGHT)) * 1
max_wt_score <- sum(abs(WEIGHTS$WEIGHT)) * 10
FACTORS_MUNI <- FACTORS_MUNI %>%
mutate(SCORE_OVERALL_SCALED = (SCORE_OVERALL - min_wt_score) / (max_wt_score - min_wt_score) * 100)
FACTORS_MUNI$COHORT <- cut(as.vector(FACTORS_MUNI$SCORE_OVERALL_SCALED), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
FACTORS_MUNI <- FACTORS_MUNI %>%
mutate(COHORT = fct_relevel(COHORT, sort))
FACTORS_CCA <- FACTORS_CCA %>%
mutate(SCORE_OVERALL_SCALED = (SCORE_OVERALL - min_wt_score) / (max_wt_score - min_wt_score) * 100)
FACTORS_CCA$COHORT <- cut(as.vector(FACTORS_CCA$SCORE_OVERALL_SCALED), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
FACTORS_CCA <- FACTORS_CCA %>%
mutate(COHORT = fct_relevel(COHORT, sort))
writexl::write_xlsx(FACTORS_MUNI, paste0("output/muni_edi_1yr_2024.xlsx"))
writexl::write_xlsx(FACTORS_CCA, paste0("output/cca_edi_1yr_2024.xlsx"))
# Calculate 3-year average scores and reassign cohorts --------------------
# Munis
MUNI_CURRENTYR <- FACTORS_MUNI %>%
rename(WEIGHTED_SCORE = SCORE_OVERALL_SCALED) %>%
select(GEOID, MUNI, COHORT, WEIGHTED_SCORE, starts_with("SCORE_")) %>%
select(-SCORE_OVERALL)
MUNI_SCORES_YEAR1 <- paste0("output\\muni_edi_1yr_2022.csv") %>%
read_csv() %>%
select(GEOID, SCORE_YEAR1 = SCORE_OVERALL_SCALED)
MUNI_SCORES_YEAR2 <- paste0("output\\muni_edi_1yr_2023.csv") %>%
read_csv() %>%
select(GEOID, SCORE_YEAR2 = SCORE_OVERALL_SCALED)
MUNI_SCORES_3YR_AVG <- MUNI_CURRENTYR %>%
select(GEOID, MUNI, SCORE_YEAR3 = WEIGHTED_SCORE) %>%
mutate(GEOID = as.numeric(GEOID)) |>
left_join(MUNI_SCORES_YEAR2) %>%
left_join(MUNI_SCORES_YEAR1) %>%
mutate(WEIGHTED_SCORE_3YR = (SCORE_YEAR1 + SCORE_YEAR2 + SCORE_YEAR3) / 3) %>%
select(-starts_with("SCORE_YEAR"))
MUNI_SCORES_3YR_AVG$COHORT_3YR <- cut(as.vector(MUNI_SCORES_3YR_AVG$WEIGHTED_SCORE_3YR), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
MUNI_SCORES_3YR_AVG <- MUNI_SCORES_3YR_AVG %>%
mutate(COHORT_3YR = fct_relevel(COHORT_3YR, sort))
# CCAs
CCA_CURRENTYR <- FACTORS_CCA %>%
rename(WEIGHTED_SCORE = SCORE_OVERALL_SCALED) %>%
select(CCA_ID, CCA_NAME, COHORT, WEIGHTED_SCORE, starts_with("SCORE_")) %>%
select(-SCORE_OVERALL)
CCA_SCORES_YEAR1 <- paste0("output\\cca_edi_1yr_2022.csv") %>%
read_csv() %>%
select(CCA_ID, SCORE_YEAR1 = SCORE_OVERALL_SCALED)
CCA_SCORES_YEAR2 <- paste0("output\\cca_edi_1yr_2023.csv") %>%
read_csv() %>%
select(CCA_ID, SCORE_YEAR2 = SCORE_OVERALL_SCALED)
CCA_SCORES_3YR_AVG <- CCA_CURRENTYR %>%
select(CCA_ID, CCA_NAME, SCORE_YEAR3 = WEIGHTED_SCORE) %>%
mutate(CCA_ID = as.numeric(CCA_ID)) |>
left_join(CCA_SCORES_YEAR2) %>%
left_join(CCA_SCORES_YEAR1) %>%
mutate(WEIGHTED_SCORE_3YR = (SCORE_YEAR1 + SCORE_YEAR2 + SCORE_YEAR3) / 3) %>%
select(-starts_with("SCORE_YEAR"))
CCA_SCORES_3YR_AVG$COHORT_3YR <- cut(as.vector(CCA_SCORES_3YR_AVG$WEIGHTED_SCORE_3YR), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
CCA_SCORES_3YR_AVG <- CCA_SCORES_3YR_AVG %>%
mutate(COHORT_3YR = fct_relevel(COHORT_3YR, sort))
openxlsx::write.xlsx(
list(
COHORT_EDI_MUNI = MUNI_SCORES_3YR_AVG,
COHORT_EDI_CCA = CCA_SCORES_3YR_AVG),
file = "output//edi_results_24.xlsx",
rowNames = FALSE)
# comparison --------------------------------------------------------------
old_scores_munis <- read_csv("input/cohort_assignments_muni_3yr_2022_2024.csv") |> select(GEOID, old_cohort = COHORT_3YR)
old_scores_ccas <- read_csv("input/cohort_assignments_cca_3yr_2022_2024.csv") |> select(CCA_ID, old_cohort = COHORT_3YR)
join_munis <- MUNI_SCORES_3YR_AVG |>
left_join(old_scores_munis) |>
mutate(score_change = as.numeric(COHORT_3YR) - as.numeric(old_cohort),
abs_change = abs(score_change)         ,
direction = case_when(
score_change < 0 ~ "Lower need after change",
score_change > 0 ~ "Higher need after change",
score_change == 0 ~ "Same need after change",
T ~ NA
))
join_cca <- CCA_SCORES_3YR_AVG |>
left_join(old_scores_ccas) |>
mutate(score_change = as.numeric(COHORT_3YR) - as.numeric(old_cohort),
abs_change = abs(score_change)         ,
direction = case_when(
score_change < 0 ~ "Lower need after change",
score_change > 0 ~ "Higher need after change",
score_change == 0 ~ "Same need after change",
T ~ NA
)) |>
rename(GEOID = CCA_ID, MUNI = CCA_NAME)
table(join_munis$score_change)
prop.table(table(join_munis$score_change))
table(join_cca$score_change)
prop.table(table(join_cca$score_change))
change <- rbind(join_cca, join_munis) |> filter(direction != "Same need after change")
write_csv(change, "edi_changes.csv")
table(join_munis$direction)
prop.table(table(join_ccas$direction))
table(join_munis$direction)
prop.table(table(join_munis$direction))
table(join_ccas$direction)
table(join_munis$direction)
prop.table(table(join_munis$direction))
table(join_cca$direction)
prop.table(table(join_cca$direction))
365+58
236+58
33+294+34
33/361
294/361
34/361
nrow(join_cca)
nrow(join_munis)
77+284
getwd()
############## PART 1: SETUP AND IMPORT
#install.packages("tidyverse", "readxl", "ggplot2", "sf", "tmap", "tmaptools", "devtools")
#devtools::install_github("CMAP-REPOS/cmapplot", build_vignettes = TRUE)
#devtools::install_github("CMAP-REPOS/cmapgeo", build_vignettes = TRUE)
library(tidyverse)
library(readxl)
library(ggplot2)
library(sf)
library(tmap)
library(tmaptools)
library(cmapplot)
library(cmapgeo)
apply_cmap_default_aes()
COHORT_YEAR <- 2024  # Update this each year!
IN_XLSX <- "input/community_cohort_inputs_edi_2024.xlsx"  # Spreadsheet containing latest data
# Load input factors, weights and cohort thresholds -----------------------
FACTORS_MUNI <- read_xlsx(IN_XLSX, sheet="FACTORS_MUNI")
FACTORS_CCA <- read_xlsx(IN_XLSX, sheet="FACTORS_CCA")
WEIGHTS <- read_xlsx(IN_XLSX, sheet="WEIGHTS")
COHORTS <- read_xlsx(IN_XLSX, sheet="COHORTS")
COHORTS$COHORT <- as.character(COHORTS$COHORT)
# Calculate factor-specific scoring thresholds ----------------------------
WEIGHTS$MED <- unlist(summarize_all(FACTORS_MUNI[, WEIGHTS$FACTOR_NAME], median)[1,])
WEIGHTS$SD <- unlist(summarize_all(FACTORS_MUNI[, WEIGHTS$FACTOR_NAME], sd)[1,])
WEIGHTS <- WEIGHTS %>%
mutate(
CUT0 = -Inf,
CUT1 = MED - SD * 1.2816,  # ~10th %ile (based on standard normal distribution)
CUT2 = MED - SD * 0.8416,  # ~20th %ile
CUT3 = MED - SD * 0.5244,  # ~30th %ile
CUT4 = MED - SD * 0.2533,  # ~40th %ile
CUT5 = MED,                # ~50th %ile
CUT6 = MED + SD * 0.2533,  # ~60th %ile
CUT7 = MED + SD * 0.5244,  # ~70th %ile
CUT8 = MED + SD * 0.8416,  # ~80th %ile
CUT9 = MED + SD * 1.2816,  # ~90th %ile
CUT10 = Inf
)
# Force equal intervals and midpoint of 0.5 for PCT_EDA_POP factor
WEIGHTS[WEIGHTS$FACTOR_NAME=="PCT_EDA_POP", paste0("CUT", 1:9)] <- as.list(seq(0.1, 0.9, 0.1))
############## PART 2: CALCULATE SCORES
# Calculate factor-specific scores ----------------------------------------
keep_cols_muni <- append(c("GEOID", "MUNI"), WEIGHTS$FACTOR_NAME)
keep_cols_cca <- append(c("CCA_ID", "CCA_NAME"), WEIGHTS$FACTOR_NAME)
FACTORS_MUNI <- FACTORS_MUNI[, keep_cols_muni]
FACTORS_CCA <- FACTORS_CCA[, keep_cols_cca]
score_cols <- c()
wt_score_cols <- c()
for (factor in unlist(WEIGHTS[WEIGHTS$WEIGHT!=0, "FACTOR_NAME"])) {
weight <- WEIGHTS[WEIGHTS$FACTOR_NAME==factor, "WEIGHT"][[1]]
score_col <- paste0("SCORE_", factor)
score_cols <- append(score_cols, score_col)
wt_score_col <- paste0("WT_SCORE_", factor)
wt_score_cols <- append(wt_score_cols, wt_score_col)
cuts <- WEIGHTS[WEIGHTS$FACTOR_NAME==factor,] %>%
select(starts_with("CUT"))
groups <- c(1:10)
FACTORS_MUNI[, score_col] <- cut(as.matrix(FACTORS_MUNI[, factor]), cuts, groups, labels=FALSE)
FACTORS_CCA[, score_col] <- cut(as.matrix(FACTORS_CCA[, factor]), cuts, groups, labels=FALSE)
if (weight < 0) {
# Reverse score order for factors with negative weights
FACTORS_MUNI[, score_col] <-  max(groups) + 1 - FACTORS_MUNI[, score_col]
FACTORS_CCA[, score_col] <-  max(groups) + 1 - FACTORS_CCA[, score_col]
}
FACTORS_MUNI[, wt_score_col] <- FACTORS_MUNI[, score_col] * abs(weight)
FACTORS_CCA[, wt_score_col] <- FACTORS_CCA[, score_col] * abs(weight)
}
# Calculate 1-yr score & 1-yr cohort ---------------------------------------
FACTORS_MUNI$SCORE_OVERALL <- rowSums(FACTORS_MUNI[, wt_score_cols])
FACTORS_CCA$SCORE_OVERALL <- rowSums(FACTORS_CCA[, wt_score_cols])
# Rescale from 0-100
min_wt_score <- sum(abs(WEIGHTS$WEIGHT)) * 1
max_wt_score <- sum(abs(WEIGHTS$WEIGHT)) * 10
FACTORS_MUNI <- FACTORS_MUNI %>%
mutate(SCORE_OVERALL_SCALED = (SCORE_OVERALL - min_wt_score) / (max_wt_score - min_wt_score) * 100)
FACTORS_MUNI$COHORT <- cut(as.vector(FACTORS_MUNI$SCORE_OVERALL_SCALED), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
FACTORS_MUNI <- FACTORS_MUNI %>%
mutate(COHORT = fct_relevel(COHORT, sort))
FACTORS_CCA <- FACTORS_CCA %>%
mutate(SCORE_OVERALL_SCALED = (SCORE_OVERALL - min_wt_score) / (max_wt_score - min_wt_score) * 100)
FACTORS_CCA$COHORT <- cut(as.vector(FACTORS_CCA$SCORE_OVERALL_SCALED), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
FACTORS_CCA <- FACTORS_CCA %>%
mutate(COHORT = fct_relevel(COHORT, sort))
writexl::write_xlsx(FACTORS_MUNI, paste0("output/muni_edi_1yr_2024.xlsx"))
writexl::write_xlsx(FACTORS_CCA, paste0("output/cca_edi_1yr_2024.xlsx"))
# Calculate 3-year average scores and reassign cohorts --------------------
# Munis
MUNI_CURRENTYR <- FACTORS_MUNI %>%
rename(WEIGHTED_SCORE = SCORE_OVERALL_SCALED) %>%
select(GEOID, MUNI, COHORT, WEIGHTED_SCORE, starts_with("SCORE_")) %>%
select(-SCORE_OVERALL)
MUNI_SCORES_YEAR1 <- paste0("output\\muni_edi_1yr_2022.csv") %>%
read_csv() %>%
select(GEOID, SCORE_YEAR1 = SCORE_OVERALL_SCALED)
MUNI_SCORES_YEAR2 <- paste0("output\\muni_edi_1yr_2023.csv") %>%
read_csv() %>%
select(GEOID, SCORE_YEAR2 = SCORE_OVERALL_SCALED)
MUNI_SCORES_3YR_AVG <- MUNI_CURRENTYR %>%
select(GEOID, MUNI, SCORE_YEAR3 = WEIGHTED_SCORE) %>%
mutate(GEOID = as.numeric(GEOID)) |>
left_join(MUNI_SCORES_YEAR2) %>%
left_join(MUNI_SCORES_YEAR1) %>%
mutate(WEIGHTED_SCORE_3YR = (SCORE_YEAR1 + SCORE_YEAR2 + SCORE_YEAR3) / 3) %>%
select(-starts_with("SCORE_YEAR"))
MUNI_SCORES_3YR_AVG$COHORT_3YR <- cut(as.vector(MUNI_SCORES_3YR_AVG$WEIGHTED_SCORE_3YR), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
MUNI_SCORES_3YR_AVG <- MUNI_SCORES_3YR_AVG %>%
mutate(COHORT_3YR = fct_relevel(COHORT_3YR, sort))
# CCAs
CCA_CURRENTYR <- FACTORS_CCA %>%
rename(WEIGHTED_SCORE = SCORE_OVERALL_SCALED) %>%
select(CCA_ID, CCA_NAME, COHORT, WEIGHTED_SCORE, starts_with("SCORE_")) %>%
select(-SCORE_OVERALL)
CCA_SCORES_YEAR1 <- paste0("output\\cca_edi_1yr_2022.csv") %>%
read_csv() %>%
select(CCA_ID, SCORE_YEAR1 = SCORE_OVERALL_SCALED)
CCA_SCORES_YEAR2 <- paste0("output\\cca_edi_1yr_2023.csv") %>%
read_csv() %>%
select(CCA_ID, SCORE_YEAR2 = SCORE_OVERALL_SCALED)
CCA_SCORES_3YR_AVG <- CCA_CURRENTYR %>%
select(CCA_ID, CCA_NAME, SCORE_YEAR3 = WEIGHTED_SCORE) %>%
mutate(CCA_ID = as.numeric(CCA_ID)) |>
left_join(CCA_SCORES_YEAR2) %>%
left_join(CCA_SCORES_YEAR1) %>%
mutate(WEIGHTED_SCORE_3YR = (SCORE_YEAR1 + SCORE_YEAR2 + SCORE_YEAR3) / 3) %>%
select(-starts_with("SCORE_YEAR"))
CCA_SCORES_3YR_AVG$COHORT_3YR <- cut(as.vector(CCA_SCORES_3YR_AVG$WEIGHTED_SCORE_3YR), c(-Inf, COHORTS$MAX_SCORE), COHORTS$COHORT)
CCA_SCORES_3YR_AVG <- CCA_SCORES_3YR_AVG %>%
mutate(COHORT_3YR = fct_relevel(COHORT_3YR, sort))
openxlsx::write.xlsx(
list(
COHORT_EDI_MUNI = MUNI_SCORES_3YR_AVG,
COHORT_EDI_CCA = CCA_SCORES_3YR_AVG),
file = "output//edi_results_24.xlsx",
rowNames = FALSE)
# comparison --------------------------------------------------------------
old_scores_munis <- read_csv("input/cohort_assignments_muni_3yr_2022_2024.csv") |> select(GEOID, old_cohort = COHORT_3YR)
old_scores_ccas <- read_csv("input/cohort_assignments_cca_3yr_2022_2024.csv") |> select(CCA_ID, old_cohort = COHORT_3YR)
join_munis <- MUNI_SCORES_3YR_AVG |>
left_join(old_scores_munis) |>
mutate(score_change = as.numeric(COHORT_3YR) - as.numeric(old_cohort),
abs_change = abs(score_change)         ,
direction = case_when(
score_change < 0 ~ "Lower need after change",
score_change > 0 ~ "Higher need after change",
score_change == 0 ~ "Same need after change",
T ~ NA
))
join_cca <- CCA_SCORES_3YR_AVG |>
left_join(old_scores_ccas) |>
mutate(score_change = as.numeric(COHORT_3YR) - as.numeric(old_cohort),
abs_change = abs(score_change)         ,
direction = case_when(
score_change < 0 ~ "Lower need after change",
score_change > 0 ~ "Higher need after change",
score_change == 0 ~ "Same need after change",
T ~ NA
)) |>
rename(GEOID = CCA_ID, MUNI = CCA_NAME)
table(join_munis$score_change)
prop.table(table(join_munis$score_change))
table(join_cca$score_change)
prop.table(table(join_cca$score_change))
change <- rbind(join_cca, join_munis) |> filter(direction != "Same need after change")
write_csv(change, "edi_changes.csv")
